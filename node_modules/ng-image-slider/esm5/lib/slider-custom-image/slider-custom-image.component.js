/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgImageSliderService } from './../ng-image-slider.service';
/** @type {?} */
var youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
var validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
var validVideoExtensions = ['mp4'];
var SliderCustomImageComponent = /** @class */ (function () {
    function SliderCustomImageComponent(imageSliderService) {
        this.imageSliderService = imageSliderService;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        this.isVideo = false;
        this.alt = '';
        this.title = '';
        this.direction = 'ltr';
    }
    Object.defineProperty(SliderCustomImageComponent.prototype, "imageUrl", {
        // @inputs
        set: 
        // @inputs
        /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (url && typeof (url) === 'string') {
                this.fileUrl = url;
                this.fileExtension = url.replace(/^.*\./, '');
                if (this.imageSliderService.base64FileExtension(url)
                    && (validFileExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1
                        || validVideoExtensions.indexOf(this.imageSliderService.base64FileExtension(url).toLowerCase()) > -1)) {
                    this.fileExtension = this.imageSliderService.base64FileExtension(url);
                }
                // verify for youtube url
                /** @type {?} */
                var match = url.match(youtubeRegExp);
                if (match && match[2].length === 11) {
                    this.type = this.YOUTUBE;
                    this.fileUrl = "https://img.youtube.com/vi/" + match[2] + "/0.jpg";
                }
                else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = this.IMAGE;
                }
                else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                    this.type = this.VIDEO;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SliderCustomImageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SliderCustomImageComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SliderCustomImageComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    SliderCustomImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'custom-img',
                    template: "<div *ngIf=\"fileUrl\">\n    <img [ngClass]=\"{'image': type === IMAGE, 'youtube': type === YOUTUBE}\" *ngIf=\"type === IMAGE || type === YOUTUBE\"\n        [src]=\"fileUrl\"\n        [alt]=\"alt\"\n        [title]=\"title\">\n    <video [class]=\"VIDEO\" type=\"video/mp4\" *ngIf=\"type === VIDEO\" controls=\"true\">\n        <source [src]=\"fileUrl\" type=\"video/mp4\"> Your browser does not support the video tag.\n    </video>\n    <div [dir]=\"direction\" *ngIf=\"!fileUrl\" class=\"invalid-msg\">Invalid file format</div>\n    <span *ngIf=\"type === YOUTUBE || type === VIDEO || isVideo\" class=\"youtube-icon\"></span>\n</div>"
                }] }
    ];
    /** @nocollapse */
    SliderCustomImageComponent.ctorParameters = function () { return [
        { type: NgImageSliderService }
    ]; };
    SliderCustomImageComponent.propDecorators = {
        imageUrl: [{ type: Input }],
        isVideo: [{ type: Input }],
        alt: [{ type: Input }],
        title: [{ type: Input }],
        direction: [{ type: Input }]
    };
    return SliderCustomImageComponent;
}());
export { SliderCustomImageComponent };
if (false) {
    /** @type {?} */
    SliderCustomImageComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.IMAGE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.VIDEO;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileUrl;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileExtension;
    /** @type {?} */
    SliderCustomImageComponent.prototype.type;
    /** @type {?} */
    SliderCustomImageComponent.prototype.isVideo;
    /** @type {?} */
    SliderCustomImageComponent.prototype.alt;
    /** @type {?} */
    SliderCustomImageComponent.prototype.title;
    /** @type {?} */
    SliderCustomImageComponent.prototype.direction;
    /** @type {?} */
    SliderCustomImageComponent.prototype.imageSliderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWN1c3RvbS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1pbWFnZS1zbGlkZXIvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyLWN1c3RvbS1pbWFnZS9zbGlkZXItY3VzdG9tLWltYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFJVCxLQUFLLEVBQ1IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0lBRTlELGFBQWEsR0FBRyxzRUFBc0U7O0lBQ3hGLG1CQUFtQixHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDOztJQUNuRCxvQkFBb0IsR0FBRyxDQUFDLEtBQUssQ0FBQztBQUVsQztJQXdDSSxvQ0FBbUIsa0JBQXdDO1FBQXhDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7UUFuQzNELFlBQU8sR0FBRyxTQUFTLENBQUM7UUFDcEIsVUFBSyxHQUFHLE9BQU8sQ0FBQztRQUNoQixVQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUNuQixTQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQXlCVCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLFFBQUcsR0FBVyxFQUFFLENBQUM7UUFDakIsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUNuQixjQUFTLEdBQVcsS0FBSyxDQUFDO0lBR25DLENBQUM7SUE1QkQsc0JBQ0ksZ0RBQVE7UUFGWixVQUFVOzs7Ozs7O1FBQ1YsVUFDYSxHQUFHO1lBQ1osSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzlDLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQzt1QkFDakQsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzJCQUNqRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDbkcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3pFOzs7b0JBRUssS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO2dCQUN0QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtvQkFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLGdDQUE4QixLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVEsQ0FBQztpQkFDakU7cUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQkFDMUI7cUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztpQkFDMUI7YUFDSjtRQUNMLENBQUM7OztPQUFBOzs7O0lBU0QsNkNBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUVELG9EQUFlOzs7SUFBZjtJQUNBLENBQUM7Ozs7SUFFRCxnREFBVzs7O0lBQVg7SUFDQSxDQUFDOztnQkFsREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxZQUFZO29CQUN0Qix1b0JBQW1EO2lCQUN0RDs7OztnQkFUUSxvQkFBb0I7OzsyQkFtQnhCLEtBQUs7MEJBc0JMLEtBQUs7c0JBQ0wsS0FBSzt3QkFDTCxLQUFLOzRCQUNMLEtBQUs7O0lBYVYsaUNBQUM7Q0FBQSxBQW5ERCxJQW1EQztTQS9DWSwwQkFBMEI7OztJQUNuQyw2Q0FBb0I7O0lBQ3BCLDJDQUFnQjs7SUFDaEIsMkNBQWdCOztJQUNoQiw2Q0FBYTs7SUFDYixtREFBbUI7O0lBQ25CLDBDQUFrQjs7SUF5QmxCLDZDQUF5Qjs7SUFDekIseUNBQTBCOztJQUMxQiwyQ0FBNEI7O0lBQzVCLCtDQUFtQzs7SUFFdkIsd0RBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LFxuICAgIEFmdGVyVmlld0luaXQsXG4gICAgT25EZXN0cm95LFxuICAgIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdJbWFnZVNsaWRlclNlcnZpY2UgfSBmcm9tICcuLy4uL25nLWltYWdlLXNsaWRlci5zZXJ2aWNlJztcblxuY29uc3QgeW91dHViZVJlZ0V4cCA9IC9eLiooeW91dHUuYmVcXC98dlxcL3x1XFwvXFx3XFwvfGVtYmVkXFwvfHdhdGNoXFw/dj18XFwmdj18XFw/dj0pKFteI1xcJlxcP10qKS4qLyxcbiAgICB2YWxpZEZpbGVFeHRlbnNpb25zID0gWydqcGVnJywgJ2pwZycsICdnaWYnLCAncG5nJ10sXG4gICAgdmFsaWRWaWRlb0V4dGVuc2lvbnMgPSBbJ21wNCddO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2N1c3RvbS1pbWcnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zbGlkZXItY3VzdG9tLWltYWdlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTbGlkZXJDdXN0b21JbWFnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBZT1VUVUJFID0gJ3lvdXR1YmUnO1xuICAgIElNQUdFID0gJ2ltYWdlJztcbiAgICBWSURFTyA9ICd2aWRlbyc7XG4gICAgZmlsZVVybCA9ICcnO1xuICAgIGZpbGVFeHRlbnNpb24gPSAnJztcbiAgICB0eXBlID0gdGhpcy5JTUFHRTtcblxuICAgIC8vIEBpbnB1dHNcbiAgICBASW5wdXQoKVxuICAgIHNldCBpbWFnZVVybCh1cmwpIHtcbiAgICAgICAgaWYgKHVybCAmJiB0eXBlb2YgKHVybCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVVcmwgPSB1cmw7XG4gICAgICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb24gPSB1cmwucmVwbGFjZSgvXi4qXFwuLywgJycpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VTbGlkZXJTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKSBcbiAgICAgICAgICAgICYmICh2YWxpZEZpbGVFeHRlbnNpb25zLmluZGV4T2YodGhpcy5pbWFnZVNsaWRlclNlcnZpY2UuYmFzZTY0RmlsZUV4dGVuc2lvbih1cmwpLnRvTG93ZXJDYXNlKCkpID4gLTEgXG4gICAgICAgICAgICB8fCB2YWxpZFZpZGVvRXh0ZW5zaW9ucy5pbmRleE9mKHRoaXMuaW1hZ2VTbGlkZXJTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUV4dGVuc2lvbiA9IHRoaXMuaW1hZ2VTbGlkZXJTZXJ2aWNlLmJhc2U2NEZpbGVFeHRlbnNpb24odXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSBmb3IgeW91dHViZSB1cmxcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHlvdXR1YmVSZWdFeHApO1xuICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdLmxlbmd0aCA9PT0gMTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLllPVVRVQkU7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlVXJsID0gYGh0dHBzOi8vaW1nLnlvdXR1YmUuY29tL3ZpLyR7bWF0Y2hbMl19LzAuanBnYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlRXh0ZW5zaW9uICYmIHZhbGlkRmlsZUV4dGVuc2lvbnMuaW5kZXhPZih0aGlzLmZpbGVFeHRlbnNpb24udG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuSU1BR0U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZUV4dGVuc2lvbiAmJiB2YWxpZFZpZGVvRXh0ZW5zaW9ucy5pbmRleE9mKHRoaXMuZmlsZUV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5WSURFTztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBASW5wdXQoKSBpc1ZpZGVvID0gZmFsc2U7XG4gICAgQElucHV0KCkgYWx0OiBTdHJpbmcgPSAnJztcbiAgICBASW5wdXQoKSB0aXRsZTogU3RyaW5nID0gJyc7XG4gICAgQElucHV0KCkgZGlyZWN0aW9uOiBzdHJpbmcgPSAnbHRyJztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBpbWFnZVNsaWRlclNlcnZpY2U6IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgIH1cbn1cbiJdfQ==